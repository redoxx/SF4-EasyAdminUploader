# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app.path.product_images: /uploads/images/products
    app.path.campaign_images: /uploads/images/campaigns
    app.path.campaign_codes: /uploads/campaigns/import-codes
    aws.credentials.key: "%env(AWS_KEY)%"
    aws.credentials.secret: "%env(AWS_SECRET)%"
    aws.credentials.bucket: "%env(AWS_BUCKET)%"
    aws.dynamodb.endpoint: "%env(DYNAMODB_ENDPOINT)%"
    aws.dynamodb.table: "%env(DYNAMODB_CODE_TABLE_NAME)%"
    aws.dynamodb.region: "%env(DYNAMODB_REGION)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\S3UploaderListner:
        arguments: ['%aws.credentials.key%','%aws.credentials.secret%', '%aws.credentials.bucket%']
        #arguments: ["@=container.getParameter('aws.credentials.key')", "@=container.getParameter('aws.credentials.secret')"]
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    # code validator service
    App\Validator\Constraints\ContainsCodesValidator:
        arguments: ['%aws.credentials.key%','%aws.credentials.secret%','%aws.credentials.bucket%','%aws.dynamodb.endpoint%','%aws.dynamodb.table%','%aws.dynamodb.region%',"@logger","@request_stack"]
        tags:
            - { name: validator.constraint_validator, alias: application_code_validator }
